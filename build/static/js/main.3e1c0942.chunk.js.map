{"version":3,"sources":["components/home/Home.js","components/onboarding/FormComponent.js","components/onboarding/Todo.js","components/onboarding/TodoList.js","components/onboarding/TodoContainer.js","components/common/NotFound.js","components/common/Navigation.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Home","react_default","a","createElement","className","Component","FormComponent","_ref","setInputText","inputText","setStatus","fetchData","submitTodoHandler","e","preventDefault","fetch","method","headers","Content-Type","body","JSON","stringify","text","completed","then","Form","onSubmit","Row","Col","Control","value","type","onChange","target","size","required","placeholder","Button","onClick","variant","style","color","background","Select","Todo","todo","todos","setTodos","concat","map","item","id","Object","objectSpread2","console","log","index_es","icon","faSquareCheck","filter","el","faTrash","TodoList","filteredTodos","onboarding_Todo","key","TodoContainer","_useState","useState","_useState2","slicedToArray","_useState3","_useState4","_useState5","_useState6","status","_useState7","_useState8","setFilteredTodos","response","json","data","useEffect","filterHandler","onboarding_FormComponent","onboarding_TodoList","NotFound","Navigation","Navbar","Container","Brand","Nav","react_router_dom","to","App","Navigation_Navigation","react_router","path","element","Home_Home","onboarding_TodoContainer","NotFound_NotFound","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3e1c0942.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport default class Home extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"home-container\">\r\n        <header>\r\n          <h1 className=\"home-title\">Home</h1>\r\n        </header>\r\n        <h4 className=\"home-text\">\r\n          Welcome! Click on the \"Tasks\" link in the navigation bar to see all\r\n          your onboarding tasks.\r\n        </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Form, Row, Col, Button } from \"react-bootstrap\";\r\n\r\nconst FormComponent = ({ setInputText, inputText, setStatus, fetchData }) => {\r\n  // handler for setting input text\r\n  const inputTextHandler = (e) => {\r\n    setInputText(e.target.value);\r\n  };\r\n\r\n  // handler for setting todo item\r\n  const submitTodoHandler = (e) => {\r\n    e.preventDefault();\r\n    fetch(\"/api/todo\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ text: inputText, completed: false }),\r\n    }).then(() => {\r\n      // get updated todos list with the id number set by cosmos db\r\n      fetchData();\r\n    });\r\n    setInputText(\"\");\r\n  };\r\n\r\n  // handler for settting filter status\r\n  const statusHandler = (e) => {\r\n    setStatus(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <Form className=\"todo-form\" onSubmit={submitTodoHandler}>\r\n      <Row>\r\n        <Col>\r\n          <Form.Control\r\n            className=\"todo-input\"\r\n            value={inputText}\r\n            type=\"text\"\r\n            onChange={inputTextHandler}\r\n            size=\"lg\"\r\n            required\r\n            placeholder=\"Enter a task...\"\r\n          />\r\n        </Col>\r\n        <Col>\r\n          <Button\r\n            className=\"todo-button\"\r\n            onClick={submitTodoHandler}\r\n            type=\"submit\"\r\n            size=\"lg\"\r\n            variant=\"default\"\r\n            style={{ color: \"white\", background: \"#98DDCA\" }}\r\n          >\r\n            Add\r\n          </Button>\r\n        </Col>\r\n        <Col>\r\n          <Form.Select\r\n            className=\"todo-select\"\r\n            onChange={statusHandler}\r\n            size=\"lg\"\r\n          >\r\n            <option value=\"all\">All</option>\r\n            <option value=\"completed\">Completed</option>\r\n            <option value=\"uncompleted\">Uncompleted</option>\r\n          </Form.Select>\r\n        </Col>\r\n      </Row>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default FormComponent;\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTrash, faSquareCheck } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Todo = ({ text, todo, todos, setTodos }) => {\r\n  const deleteHandler = () => {\r\n    todos.map((item) => {\r\n      if (item.id === todo.id) {\r\n        fetch(`/api/todo/${item.id}`, {\r\n          method: \"DELETE\",\r\n        }).then(() => {\r\n          console.log(\"deleted successfully.\");\r\n        });\r\n      }\r\n    });\r\n    // matching clicked element with element from state\r\n    setTodos(todos.filter((el) => el.id !== todo.id));\r\n  };\r\n\r\n  const completeHandler = () => {\r\n    setTodos(\r\n      todos.map((item) => {\r\n        if (item.id === todo.id) {\r\n          fetch(`/api/todo/${item.id}`, {\r\n            method: \"PUT\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify({ ...item, completed: !item.completed }),\r\n          }).then(() => {\r\n            console.log(\"updated successfully.\");\r\n          });\r\n          return {\r\n            ...item,\r\n            completed: !item.completed,\r\n          };\r\n        }\r\n        return item;\r\n      })\r\n    );\r\n  };\r\n  return (\r\n    <div className=\"todo\">\r\n      <li className={`todo-item ${todo.completed ? \"completed\" : \"\"}`}>\r\n        {text}\r\n      </li>\r\n      <button className=\"complete-btn\" onClick={completeHandler}>\r\n        <FontAwesomeIcon icon={faSquareCheck}></FontAwesomeIcon>\r\n      </button>\r\n      <button className=\"trash-btn\" onClick={deleteHandler}>\r\n        <FontAwesomeIcon icon={faTrash}></FontAwesomeIcon>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Todo;\r\n","import React from \"react\";\r\nimport Todo from \"./Todo\";\r\n// comment\r\nconst TodoList = ({ todos, setTodos, filteredTodos }) => {\r\n  return (\r\n    <div className=\"todo-list-container\">\r\n      <ul className=\"todo-list\">\r\n        {filteredTodos.map((todo) => (\r\n          <Todo\r\n            setTodos={setTodos}\r\n            todos={todos}\r\n            key={todo.id}\r\n            todo={todo}\r\n            text={todo.text}\r\n          />\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\n// importing components\r\nimport FormComponent from \"./FormComponent\";\r\nimport TodoList from \"./TodoList\";\r\nimport Spinner from \"../common/Spinner\";\r\n\r\nconst TodoContainer = () => {\r\n  // states\r\n  const [inputText, setInputText] = useState(\"\");\r\n  const [todos, setTodos] = useState([]);\r\n  const [status, setStatus] = useState(\"all\");\r\n  const [filteredTodos, setFilteredTodos] = useState([]);\r\n\r\n  // side effect to load todo list items from API and set todos state on inital load\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  function fetchData() {\r\n    fetch(\"/api/todo\")\r\n      .then((response) => response.json())\r\n      .then((data) => setTodos(data));\r\n  }\r\n\r\n  // side effects\r\n  useEffect(() => {\r\n    filterHandler();\r\n  }, [todos, status]);\r\n\r\n  // function used to set filtered list based on current status\r\n  const filterHandler = () => {\r\n    switch (status) {\r\n      case \"completed\":\r\n        setFilteredTodos(todos.filter((todo) => todo.completed === true));\r\n        break;\r\n      case \"uncompleted\":\r\n        setFilteredTodos(todos.filter((todo) => todo.completed === false));\r\n        break;\r\n      default:\r\n        setFilteredTodos(todos);\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"todo-container\">\r\n      <header>\r\n        <h1 className=\"todo-title\">Onboarding Checklist</h1>\r\n      </header>\r\n      <FormComponent\r\n        inputText={inputText}\r\n        setInputText={setInputText}\r\n        setStatus={setStatus}\r\n        fetchData={fetchData}\r\n      />\r\n      <TodoList\r\n        setTodos={setTodos}\r\n        todos={todos}\r\n        filteredTodos={filteredTodos}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoContainer;\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class NotFound extends Component {\r\n  render() {\r\n    return <h1>NotFound</h1>;\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Container, Nav, Navbar } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./Navigation.css\";\r\n\r\nexport default function Navigation() {\r\n  return (\r\n    <Navbar variant=\"default\" style={{ background: \"#FFAAA7\" }}>\r\n      <Container>\r\n        <Navbar.Brand>\r\n          <h1 style={{ color: \"white\" }}>DE Companion</h1>\r\n        </Navbar.Brand>\r\n        <Nav className=\"me-auto nav-text\">\r\n          <Link to=\"/\">Home</Link>\r\n          <Link to=\"/tasks\">Tasks</Link>\r\n        </Nav>\r\n      </Container>\r\n    </Navbar>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Route, Routes } from \"react-router-dom\";\r\nimport \"./App.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nimport Home from \"./components/home/Home\";\r\nimport TodoContainer from \"./components/onboarding/TodoContainer\";\r\nimport NotFound from \"./components/common/NotFound\";\r\nimport Navigation from \"./components/common/Navigation\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Navigation />\r\n      <Routes>\r\n        <Route path=\"/\" element={<Home />} />\r\n        <Route path=\"/tasks\" element={<TodoContainer />} />\r\n        <Route path=\"*\" element={<NotFound />} />\r\n      </Routes>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.unregister();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}